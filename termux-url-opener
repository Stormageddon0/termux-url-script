#!/data/data/com.termux/files/usr/bin/bash

#TODO
# detect youtube mixes?
# embed thumbnails for videos (requires atomic parsley)
# echo names of video/audio during metadata download

randid=$RANDOM
folder="/data/data/com.termux/files/home/storage/shared/Youtube"
command=(--no-warnings --no-mtime --add-metadata -o "$folder/%(title)s.%(ext)s")
jsoncommand=(--quiet --skip-download --write-info-json --output "$folder/$randid-%(autonumber)03d-%(title)s.%(ext)s")
subs="--embed-subs --write-sub --sub-lang enUS,en-US,en --sub-format best"

echo "YouTube downloader script v0.105"
if ! ping -c 1 -q 8.8.8.8 2>/dev/null >/dev/null; then
    echo "No internet connection..."
    echo "Exiting..."
    sleep 5
    exit 2
fi

while true; do
    echo "1) Audio file"
    echo "2) Audio playlist"
    echo ""
    echo "3) Video file"
    echo "4) Video playlist"
    echo ""
    if echo "${command[@]}" | grep -q -- '--write-sub'; then
        echo "5) Turn off subtitles"
    else
        echo "5) Turn on subtitles"
    fi
    echo "6) Quit"
    read -r -p "Choose and press enter: " reply

    case "$reply" in
        # options 1 and 2 are audio only options (without and with playlist)
        # download the best aac audio if available, transcode if necessary
        "1" ) command+=(--audio-format m4a --format bestaudio[ext=m4a]/best --extract-audio "$1"); jsoncommand+=("--audio-format" "m4a" "--extract-audio" "--format" "bestaudio[ext=m4a]/best"); playlist=false ;;
        "2" ) command+=(--audio-format m4a --format bestaudio[ext=m4a]/best --extract-audio "$1"); jsoncommand+=("--audio-format" "m4a" "--extract-audio" "--format" "bestaudio[ext=m4a]/best"); playlist=true ;;
        # options 3 and 4 are video options (without and with playlist)
        # download best resolution up to 1080p, transcode to mp4 if necessary
        "3" ) command+=(--merge-output-format mp4 --format "bestvideo[height<=1080]+bestaudio/best[height<=1080]" "$1"); jsoncommand+=("--merge-output-format" "mp4" "--format" "bestvideo[height<=1080]+bestaudio/best[height<=1080]"); playlist=false ;;
        "4" ) command+=(--merge-output-format mp4 --format "bestvideo[height<=1080]+bestaudio/best[height<=1080]" "$1"); jsoncommand+=("--merge-output-format" "mp4" "--format" "bestvideo[height<=1080]+bestaudio/best[height<=1080]"); playlist=true ;;
        "5" )
            if echo "${command[@]}" | grep -q -- '--write-sub'; then
                # chop off the last 6 values in ${command}, preserving existing word splitting
                # shellcheck disable=SC2206
                command=(${command[@]:0:${#command[*]}-6})
                # shellcheck disable=SC2206
                jsoncommand=(${jsoncommand[@]:0:${#jsoncommand[*]}-6})
            else
                command+=($subs)
                jsoncommand+=($subs)
            fi
            reset -Q
            continue
        ;;
        "6" ) exit 0 ;;
        "" | * )
            # one of the options was not chosen, prompt again
            # termux-wake-unlock
            continue
        ;;
    esac
    break
done
termux-wake-lock
if [ ! -d "$folder" ]; then
    if ! termux-setup-storage; then
        echo "Unable to obtain permission to storage."
        exit 1
    else
        # termux obtained permission to use public storage from the system, try to make directory
        if ! mkdir "$folder"; then
            echo "Unable to make the folder!"
            echo "Quitting..."
            exit 1
        fi
    fi
fi
cd "$folder" || exit 1

# Update youtube-dl automatically
# check if last attempted update was today
# Returns true if modified since the beginning of the day
if [ -n "$(find /data/data/com.termux/files/home -maxdepth 1 -daystart -mtime -1 -type f -name ytdlupdate)" ]; then
    echo "Recently checked for updates"
else
    echo "Checking for youtube-dl updates..."
    if pip install --quiet --upgrade youtube-dl; then
        touch /data/data/com.termux/files/home/ytdlupdate
    fi
fi

# download video information, then scrape the proper information for the title or playlist name
echo "Downloading link metadata..."
# cleanup json files if we get interuppted
trap 'rm $randid-*.info.json; termux-wake-unlock; trap - EXIT INT TERM; kill -s INT "$$"' INT
trap 'rm $randid-*.info.json; termux-wake-unlock; trap - EXIT TERM; exit 1' EXIT TERM HUP
# check if an option to download a playlist was selected
if [[ "$playlist" == 'true' ]]; then
    # cache download data so we only have to download it once
    # --ignore-errors so youtube-dl can skip unavailable items
    youtube-dl "${jsoncommand[@]}" --yes-playlist --ignore-errors "$1"
    # check the number of entries in the playlist, if there is only one or is null, then get the Title instead of the playlist name.
    case "$(jq --raw-output '.n_entries' <$randid-001.info.json)" in
        "0" | "1" | "null" )
            echo "link is a single video, selecting single"
            playlist="false"
            vidtitle=$(jq --raw-output '.title' <$randid-001.info.json)
        ;;
        * )
            vidtitle=$({ printf 'Playlist: '; jq --raw-output '.playlist' <$randid-001.info.json;} )
        ;;
    esac
else
    youtube-dl "${jsoncommand[@]}" --no-playlist "$1"
    file="$(jq --raw-output '._filename' <$randid-001*.info.json | sed 's|[0-9]\+-[0-9]\+-\(.*\)|\1|')"
    vidtitle="$(jq --raw-output '.title' <$randid-001*.info.json)"
    if [[ "$vidtitle" == "null" ]]; then
        echo "Failed to download video information."
        sleep 5
        exit 1
    fi
fi
# trap exit and interrupt to cleanup a notification
trap 'termux-notification --id $randid --group "downloadfailed" --title "Download Failed" --content "$vidtitle"; rm $randid-*; termux-wake-unlock; trap - EXIT INT TERM; kill -s INT "$$"' INT
trap 'termux-notification --id $randid --group "downloadfailed" --title "Download Failed" --content "$vidtitle"; rm $randid-*; termux-wake-unlock; trap - EXIT TERM; exit 1' EXIT TERM HUP

termux-notification --id $randid --ongoing --group 'downloading' --title "Downloading" --content "$vidtitle"
echo "Beginning Download"
# start youtube-dl
for jsonfile in "$randid"-*.info.json
do
    #shellcheck disable=SC2086
    youtube-dl --load-info-json "$jsonfile" "${command[@]}"
    youtubedlExitCodes+=($?)
    if [[ ${youtubedlExitCodes[${#youtubedlExitCodes[*]}]} -eq 0 ]]; then
        # remove json files
        rm "$jsonfile"
        # remove subtitle files
        rm "$randid"-*.en.* 2>/dev/null
        rm "$randid"-*.enUS.* 2>/dev/null
        rm "$randid"-*.en-US.* 2>/dev/null
    else
        vidtitle+=($'\n'"$(jq --raw-output ".title" "$jsonfile")")
    fi
done
termux-wake-unlock
for i in "${youtubedlExitCodes[@]}"; do
    return=$(( return + i ))
done
if [[ $return -eq 0 ]]; then
    file="$(realpath "$file")"
    termux-notification --id $randid --group 'downloadfinished' --title "Download Finished" --content "${vidtitle[*]}" --action "termux-share \"$file\""
    termux-media-scan "$folder"
else
    echo "There were errors downloading some files ($return)"
    termux-notification --id $randid --group 'downloadfailed' --title "Download Failed" --content "${vidtitle[*]}"
fi
trap - EXIT TERM
exit $return
